// Generates a CSS triangle using borders
//
// $pointy-side             - The word "top", "bottom", "left", "right". Used to indicate the direction the arrow faces.
// $arrow-color             - The color hex at the bottom.
// $transparent-border-size - Width of the transparent borders that effect how the triangle is rendered.
// $color-border-size       - Width of the colored border that effect how the triangle is rendered.
//
// Compatible in Everything we support // usage @include triangle(right, #fff, rem(17px), rem(25px))
@mixin triangle($pointy-side, $arrow-color, $transparent-border-size, $color-border-size) {
  border: $transparent-border-size solid transparent;
  border-#{$pointy-side}: 0;
  border-#{opposite-direction($pointy-side)}: $color-border-size solid $arrow-color;
}


// Generates values for grid columns. Only outputs width and padding. You must float them manually. This is done for the most flexibility when building out componenets.
//
// $column-span 	  - How many columns you would like to make.
// map-get($grid, columns) - Total number of columns. Defaults to map-get($grid, columns) setup in helpers/_vars.sass
// $grid-padding      - The padding or gutter of the grid. Defaults to map-get($grid, gutter) setup in helpers/_vars.sass
//
// Compatible in Everything we support
@mixin grid($column-span, $grid-columns: map-get($grid, columns), $grid-padding: map-get($grid, gutter)) {
  width: $column-span / $grid-columns * 100%;
  padding-left: $grid-padding;
  padding-right: $grid-padding;
}


// Used to wrap grid elements and clear them.
//
// Compatible in Everything we support
@mixin grid-wrap {
  width: 100%;
  max-width: map-get($grid, max-width);
  margin: 0 auto;

  @extend .group;
}


// Push or pull a grid element while leaving it in the flow of the document and effecting other gird elements.
//
// $column-span   - Number of columns you would like to push over.
// $$grid-columns - Total number of columns. Defaults to map-get($grid, columns) setup in helpers/_vars.sass
//
// Compatible in Everything we support
@mixin grid-push($column-span, $grid-columns: map-get($grid, columns)) {
  margin-left: $column-span / $grid-columns * 100%;
}

// Pull a grid element while leaving it in the flow of the document and effecting other gird elements.
//
// $column-span   - Number of columns you would like to push over.
// $$grid-columns - Total number of columns. Defaults to map-get($grid, columns) setup in helpers/_vars.sass
//
// Compatible in Everything we support
@mixin grid-pull($column-span, $grid-columns: map-get($grid, columns)) {
  margin-left: $column-span / $grid-columns * 100% * -1;
}

// Box Shadow
@mixin box-shadow($x: 2px, $y: 2px, $blur: 2px, $spread: 0, $color: rgba(0,0,0, .15), $inset: "") {
	@if ($inset != "") {
		box-shadow: $inset $x $y $blur $spread $color;
	} @else {
		box-shadow: $x $y $blur $spread $color;
		}
	}


// Box Shadow remove
@mixin box-shadow-none { box-shadow: none; }


@mixin box-sizing { box-sizing: border-box; }


// Radius Settings
@mixin border-radius($radius: 2px) {
	border-radius: $radius;
	background-clip: padding-box;  // stops bg color from leaking outside the border:
	}


// Material Card Shadowing
@mixin depth($ui-depth: two) {

	@if ($ui-depth == base) {
		// OFF box-shadow: 0 0 1px rgba(0, 0, 0, 0.08), 0 0 3px rgba(0, 0, 0, 0.08);
        box-shadow: 0 0 2px rgba(0,0,0,0.05), 0 0 2px rgba(0,0,0,0.18);

    } @if ($ui-depth == one) {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1), 0 0 4px rgba(0,0,0,0.1);
        // NEW box-shadow: 0 2px 4px rgba(0,0,0,0.12), 0 2px 4px rgba(0,0,0,0.24);

	} @if ($ui-depth == two) {
		box-shadow: 0 2px 4px rgba(0,0,0,0.1), 0 0 4px rgba(0,0,0,0.1);
        // NEW box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);

	} @if ($ui-depth == three) {
		// OFF box-shadow: 0 3px 6px rgba(0,0,0,0.1), 0 -2px 6px rgba(0,0,0,0.1);
        box-shadow: 0 3px 13px rgba(0,0,0,0.10), 0 6px 6px rgba(0,0,0,0.18);

	} @if ($ui-depth == four) {
		// OFF box-shadow: 0 8px 18px rgba(0,0,0,0.16), 0 -5px 6px rgba(0,0,0,0.1);
        box-shadow: 0 4px 22px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);

	} @if ($ui-depth == five) {
		// OFF box-shadow: 0 10px 24px rgba(0,0,0,0.22), 0 -8px 10px rgba(0,0,0,0.1);
        box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);

    } @if ($ui-depth == none) {
        box-shadow: none;

    }

	background-clip: 		padding-box;  // stops bg color from leaking outside the border:
	box-sizing: 		border-box;
	}


// Absolutely or fixed positioned centered content X-Y access
@mixin centered-positioning($position-type: absolute, $translate-x-position: -50%, $translate-y-position: -50%) {
	top: 50%;
	left: 50%;
	position: $position-type;
  	transform: translate($translate-x-position, $translate-y-position);
	box-sizing: border-box;
	}


// Image overlay opacity styles
@mixin image-overlay($size: three) {

	@if ($size == one) {
		box-shadow: inset 0 0 200px 0 rgba(0, 0, 0, .5);
        background-color: rgba(0, 0, 0, .4);

    } @if ($size == two) {
        box-shadow: inset 0 10px 500px 0 rgba(0, 0, 0, .8);
        background-color: rgba(0, 0, 0, .4);

	} @if ($size == three) {
		box-shadow: inset 0 10px 1000px 0 rgba(0, 0, 0, .9);
        background-color: rgba(0, 0, 0, .5);

	} @if ($size == four) {
		box-shadow: inset 0 10px 2000px 0 rgba(0, 0, 0, .9);
        background-color: rgba(0, 0, 0, .6);
	   }

	}


// Remove any inherted styles
@mixin reset-inheritance {
	color: $base-font-color;
	background-color: transparent;
	font-weight: 300;
	font-size: map-get($typography, base-font-size);
	font-family: map-get($typography, roboto);
	line-height: 1;
	vertical-align: baseline;
	padding: 0;
	margin: 0;
	border-style: none;
	}


// Transform remove
@mixin transform-none { transform: none; }


// Transform rotate
@mixin transform-rotate($rotation: 90deg) {
	transform: rotate($rotation);
	transform-origin: 50% 50%;
	}


// Transitions remove
@mixin transitions-none { transition: none; }


// Translate x and y axis
@mixin translateX-Y($translate-x-position: -50%, $translate-y-position: -50%) {
  	transform: translate($translate-x-position, $translate-y-position);
	}


@mixin transitions-all($transition-speed: $global-transition-speed, $global-transition-type: all, $effect: ease-out) {
	transition: $transition-speed $global-transition-type $effect;
	}


// Generates either a min width, max-width, range, or retina media query
//
// $media-query - One of four keywords: "retina", "min", "max", "minmax". Depending on the word you will get that type of media query output.
// $res		    - The size for the breakpoint. Oftern this references a predefined variable. You should probably not have actual values in this field.
// $res2        - Same as $res and only used for minmax media queries to get a range. $res is starting point and $res2 is ending point of the range.
//
// Compatible in IE9+, Everything else.
@mixin media($media-query, $res: 0em, $res2: 0em) {
  @if $media-query == retina {
    @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2 / 1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
      @content;
    }
  }

  @if $media-query == min {
    @media screen and (min-width: $res) {
      @content;
    }
  }

  @if $media-query == max {
    @media screen and (max-width: $res) {
      @content;
    }
  }

  @if $media-query == minmax {
    @media screen and (min-width: $res) and (max-width: $res2) {
      @content;
    }
  }
}


// Utility for fitting content and images to parent container
@mixin object-fit($type: fill) {
	@if $type == fill {
		object-fit: fill;
		width: auto;
		height: auto;
		}

	@else if $type == cover {
		object-fit: cover;
		}

	@else if $type == contain {
		object-fit: contain;
		}

	@else if  $type == scale-down {
		object-fit: scale-down;
		}

	@else if  $type == none {
		object-fit: none;
		}

	}


// Mixins > truncate text
@mixin truncate($width: 100%) {
    width: $width;
    max-width: 100%;
    display: block;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    }


// Mixins > Global MediaQueries as utilities

// ----- large and up desktop ----- // 2200px +
@mixin desktop-huge-and-up { @media (min-width: #{$media-large-huge + 1}) { @content; } }

// ----- large and up desktop ----- // 1600px +
@mixin desktop-large-and-up { @media (min-width: #{$media-large-desktop + 1}) { @content; }  }

// ----- large desktop and below ----- // 1600px
@mixin desktop-large { @media (min-width: #{$media-large-desktop}) { @content; } }

// ----- default desktop and up ----- // 1124px
@mixin desktop-and-up { @media (min-width: #{$media-defaut-desktop + 1}) { @content; } }

// ----- default desktop ----- // 1124px
@mixin desktop { @media (max-width: #{$media-defaut-desktop}) { @content; } }

// ----- small and up desktop ----- // 900px - & up
@mixin laptop-and-up { @media (min-width: #{$media-small-desktop + 1}) { @content; } }

// ----- small desktop to tablet range ----- // 800px - 900px
@mixin laptop-range { @media (max-width: #{$media-small-desktop}) and (min-width: #{$media-tablet}) { @content; } }

// ----- small desktop and below ----- // 900px
@mixin desktop-small { @media (max-width: #{$media-small-desktop}) { @content; } }

// ----- tablet and up ----- // 800px - & up
@mixin tablet-and-up { @media (min-width: #{$media-tablet + 1}) { @content; } }

// ----- tablets and below ----- // 800px
@mixin tablet { @media (max-width: #{$media-tablet}) { @content; } }

// ----- small device and below ----- // 620px
@mixin small-device { @media (max-width: #{$media-small-device}) { @content; } }

// ----- smallest device and below ----- // 360px
@mixin smaller-device { @media (max-width: #{$media-smaller-device}) { @content; } }
